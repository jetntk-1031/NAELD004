(*2020-09-22*)
(**)
(*Local Action, State & Status*)
VAR
	eAct : eStartupAction := StartupActIdle;
	eStat : eStartupAction := StartupActIdle;
	eStatus : eFBStatus := Idle;
	sStatTxt : STRING[200] := '';
	a_sStatText : ARRAY[0..50] OF STRING[200] := ['Idling','Running Startup',49('')];
END_VAR
(**)
(*Local Alarm*)
(**)
(*Local Output*)
VAR
	bRun : BOOL;
	eUsrFolderAct : eUsrFolderAction;
	eHWInfoAct : eHWInfoAction;
	eLibVerAct : eLibVerAction;
	eNtParamAct : eNtParamAction;
	eMcParamAct : eMcParamAction;
	eProdRcpAct : eProdRcpAction;
	eMpProdRcpAct : eMpProdRcpAction;
	eMagRcpAct : eMagRcpAction;
	eMagRcpAct1 : eMagRcpAction;
	eUsrMgmtAct : eUsrMgmtAction;
	eBuffer1Act : eBufferAction;
	eBuffer2Act : eBufferAction;
	eBuffer3Act : eBufferAction;
	eBuffer4Act : eBufferAction;
	eAlarmAct : eAlarmAction;
	eUIAct : eUIAction;
	eAWPushPulAct : eAWAction;
	eAWAct : eAWAction;
	eTravAct : eTravAction;
	eServoPPAct : ePullerPusherAction;
	eLifterAct : eLifterAction;
	eFrmAct : eFrmAction;
	eUSBAct : eUSBRdrAction;
	eHermesAct : eHermesAction;
	eRmtHermesAct : eHermesAction;
	eSvyHermesAct : eHermesAction;
	eAutoRcpAct : eAutoRcpAction;
	eDSHermesAAct : eHermesAction;
	eDSHermesBAct : eHermesAction;
	eStartupStep1 : eStartupStep;
	bNtSettingsLoadDone : BOOL := FALSE;
	bUISettingsLoadDone : BOOL;
	sStepTxt : STRING[80];
	a_sStepText : ARRAY[0..11] OF STRING[80] := ['Creating User Folder','Reading Parameter','Getting Hardware Info','Checking Library Version','Reading Recipe List','Reading User Management List','Reading Buffer / Magazine Data','Setting Up Alarm','Setting Up Hermes','Writing Data To Servo Motor','Setting Up User Interface','Done'];
END_VAR
(**)
(*Local Input*)
VAR
	tyNtParamCurr : tyNtParam;
	tyMcParamCurr : tyMcParam;
	bMismatchOverWriteConfig : BOOL;
	bMismatchSetConfigDone : BOOL;
	bWaitDecision : BOOL;
	bTempAddrFillDone : BOOL;
	bChgConfigDone : BOOL;
	bOverwriteIP : BOOL;
	bOverwriteSubnet : BOOL;
	bOverwriteEthMode : BOOL;
	bGetConfigDone : BOOL;
END_VAR
(**)
(*Local*)
VAR
	bInitDone : BOOL;
	bInitialDone : BOOL;
	usiStep : USINT;
END_VAR
